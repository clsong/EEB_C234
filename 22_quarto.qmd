# Basics of Quarto

::: {.callout-note}
## What You’ll Learn Today
1. **The Quarto Setup**: Learn about the key parts of a Quarto document.
2. **Mixing Text, Code, Visuals & Equations**: See how you can combine explanations, code, and mathematical formulas in one neat file.
3. **Making Reproducible Reports**  
:::

## What’s Quarto All About?

Imagine a tool that lets you write your story and run your code at the same time. That’s Quarto for you! It’s like R Markdown on steroids—it works with R, Python, Julia, and more, and lets you output to HTML, PDF, Word, presentations, and even websites.

**Why should you care?**  
Because Quarto keeps your analysis, visualizations, and text all in one place. This means anyone can re-run your report and see exactly the same results—making your work truly reproducible and shareable.

## Getting Started with a Quarto Document

A typical Quarto file has two parts:

1. **YAML Header**:  
   This is where you set up your document’s settings—think title, author, format, and more.
2. **Document Body**:  
   Here’s where you mix regular text, code, cool visuals, and even equations!

### The YAML Header

The header sits at the very top and is surrounded by three dashes. Here’s a simple example:

```yaml
---
title: "My First Quarto Document"
author: "Your Name"
format: html
---
```

In this section, you tell Quarto:

- Which format you’re aiming for (HTML, PDF, etc.)
- What your document’s title, author, and date are
- What style or theme you’d like to use
- And even settings for your table of contents!

### Writing with Markdown

In the body of your document, you write in Markdown—a simple way to format your text. For example:

```markdown
# Level 1 Heading

## Level 2 Heading

This is your regular paragraph text. You can make text **bold** or *italic*.

- Bullet point one
- Bullet point two
  - Nested bullet

1. First numbered item
2. Second numbered item

> This is a blockquote that highlights something cool.

[Check out Quarto](https://quarto.org)
```

Markdown makes it super easy to structure your document without any fuss.

## Mixing in Some Code: Code Chunks

Now, the magic happens when you include code chunks. These let you run code and show the results directly in your document.

### How to Add a Code Chunk

Here’s a basic example in R:

```{r}
#| label: penguin-summary
#| echo: true
#| warning: false
#| message: false

library(tidyverse)
library(palmerpenguins)

penguins |>
    group_by(species) |>
    summarize(
        count = n(),
        mean_bill_length = mean(bill_length_mm, na.rm = TRUE),
        mean_body_mass = mean(body_mass_g, na.rm = TRUE)
    )
```

This code chunk groups the penguins dataset by species and summarizes key stats. Notice the `#|` options—these let you control what shows up in your final document.

### Customizing Your Code Chunks

You can tweak each chunk with options like:

- **echo: false** – Run the code, but hide it.
- **eval: false** – Show the code without running it.
- **warning: false** – Skip those pesky warning messages.
- **message: false** – Keep it clean by hiding messages.
- **fig-width / fig-height** – Set your figure dimensions.

These options can be set per chunk or globally in your YAML header.

## Adding Figures and Tables

### Including Figures

It’s super simple to add plots. Just write the code for your plot in a code chunk, and Quarto will display it in your document.

```markdown
#| label: penguin-plot
#| fig-cap: "Bill length vs. bill depth by species"
#| fig-width: 8
#| fig-height: 5
#| warning: false

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
    geom_point(alpha = 0.7) +
    geom_smooth(method = "lm", se = FALSE) +
    theme_minimal()
```

```{r}
#| label: penguin-plot
#| fig-cap: "Bill length vs. bill depth by species"
#| fig-width: 8
#| fig-height: 5
#| warning: false
#| echo: false

ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
    geom_point(alpha = 0.7) +
    geom_smooth(method = "lm", se = FALSE) +
    theme_minimal()
```

This chunk adds a neat caption and custom dimensions for the plot.

### Creating Tables

You can easily turn a tibble into a table in your document with `knitr::kabel()`. Here’s an example:
```{r}
penguins |>
    group_by(species) |>
    summarise(
        number = n(),
        mean_bill_length = mean(bill_length_mm, na.rm = TRUE),
    ) |>
    knitr::kable()
```


Quarto can also display stunning tables. In R, there is a package called `gt` (Grammar of Tables) that makes it easy to create and style tables. Here’s an example:

```{r}
#| label: penguin-table
#| tbl-cap: "Summary statistics by species and island"
#| echo: false

library(gt)
penguin_counts_wider <- penguins |>
    mutate(year = as.character(year)) |>
    group_by(species, island, sex, year) |>
    summarise(n = n(), .groups = "drop") |>
    pivot_wider(
        names_from = c(species, sex),
        values_from = n
    ) |>
    mutate(across(.cols = -(1:2), .fns = ~ replace_na(., replace = 0))) |>
    arrange(island, year)

actual_colnames <- colnames(penguin_counts_wider)
desired_colnames <- actual_colnames |>
    str_remove("(Adelie|Gentoo|Chinstrap)_") |>
    str_to_title()
names(desired_colnames) <- actual_colnames

spanners_and_header <- function(gt_tbl) {
    gt_tbl |>
        tab_spanner(
            label = md("**Adelie**"),
            columns = 3:4
        ) |>
        tab_spanner(
            label = md("**Chinstrap**"),
            columns = c("Chinstrap_female", "Chinstrap_male")
        ) |>
        tab_spanner(
            label = md("**Gentoo**"),
            columns = contains("Gentoo")
        ) |>
        tab_header(
            title = "Penguins in the Palmer Archipelago",
            subtitle = "Data is courtesy of the {palmerpenguins} R package"
        )
}

penguin_counts_wider |>
    mutate(across(.cols = -(1:2), ~ if_else(. == 0, NA_integer_, .))) |>
    mutate(
        island = as.character(island),
        year = as.numeric(year),
        island = paste0("Island: ", island)
    ) |>
    gt(groupname_col = "island", rowname_col = "year") |>
    cols_label(.list = desired_colnames) |>
    spanners_and_header() |>
    sub_missing(missing_text = "-") |>
    summary_rows(
        groups = TRUE,
        fns = list(
            "Maximum" = ~ max(.),
            "Total" = ~ sum(.)
        ),
        formatter = fmt_number,
        decimals = 0,
        missing_text = "-"
    ) |>
    tab_options(
        data_row.padding = px(2),
        summary_row.padding = px(3), # A bit more padding for summaries
        row_group.padding = px(4) # And even more for our groups
    ) |>
    opt_stylize(style = 6, color = "gray")
```

Check the [official document](https://gt.rstudio.com/) and [tutorial](https://gt.albert-rapp.de/quarto_gt) for how to creat tables with `gt`.
