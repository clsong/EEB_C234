# Basic Data Structure

::: {.callout-note}
## Class Objectives
- Understand `vector` and `tibble` in R
- Get comfortable with R’s common data types
:::

A **data structure** is an orderly, efficient way to store and retrieve data. While it may feel a bit abstract if you’re new to coding, think of these structures as the “nouns” in your programming language (with data wrangling serving as the “verbs”).

R has provided many data structures. Fortunately, nine times out of ten, you’ll only need to worry about two: `vector` and `tibble`.

## Vector
A **vector** is a one-dimensional array—like a row of seats in a movie theater that only allows one type of audience member, be they numeric, character, or logical. We create them with the `c()` function. For example:
```{r}
numbers <- c(1, 2, 3, 4, 5)  # <1>
numbers # <2>
```
1. Create a vector of numbers from 1 to 5.
2. Display the `numbers` vector.

::: {.callout-tip collapse="true"}
## What does `c()` stand for
`c()` means "combine." Yes, it’s a slightly cryptic name for what you’ll soon be typing all the time, but you’ll get used to it.
:::

Vectors form the backbone of R scripts. They’re how you can store the number of penguins wandering around Antarctica, keep track of class attendance, or tally cars on the highway. A key detail: everything in a vector must share the same type. Some common types are:

- `numeric` (like 3.14 or 42)
- `character` (like "Hello" or "World")
- `logical` (TRUE or FALSE)
- `factor` (categorical data)

Below, we make a few different vectors to illustrate these types:
```{r}
numbers <- c(1.1, 2.2, 3.3, 4.4, 5.5) # <1>
characters <- c("a", "b", "c") # <2>
logicals <- c(TRUE, FALSE, TRUE) # <3>
factors <- factor(c("a", "b", "c")) # <4>
```
1. Create a vector of numbers from 1 to 5.
2. Create a vector of characters.
3. Create a vector of logicals.
4. Create a vector of factors.

::: {.callout-tip}
## Be aware of data types
R automatically assigns the data type for each vector, which can save time but also lead to (unwanted) surprises. For instance, sometimes 1 appears as a character rather than a number—something that can introduce annoying bugs. Avoid headaches by checking data types with `class()`. For example:
```{r}
class(numbers) 
```   
:::

### Exercise
1. Create a vector of numbers from -1 to -3.

::: {.panel-tabset}
## Exercise
```{webr}
__ <- c(__, __, __)
__
```

## Solution
```webr
numbers <- c(-1, -2, -3)
numbers
```
:::

2. Create a vector of characters with your name and surname.
  
::: {.panel-tabset}
## Exercise
```{webr}
my_name <- c("__", "__")
my_name
```
:::

3. Create a vector of logicals by flipping a coin three times.

::: {.panel-tabset}
## Exercise
```{webr}
## Exercise
c(____, ____, ____)
```
:::

## Tibble
A `tibble` (brought to you by the `tidyverse`) is essentially a set of vectors bound together in columns—like a multi-row, multi-column theater, where each column houses a single data type.

![](img/datastructure_tibble.png){width=50%}

As a simple xample,
```{r message=FALSE}
library(tidyverse) # <1>
tibble( # <2>
    x = c(1, 2, 3),  # <3>
    y = c("a", "b", "c"), # <4>
    z = c(TRUE, FALSE, TRUE) # <5>
) # <6>
```
1. Load the `tidyverse` package, as `tibble` is from it.
2. Create a tibble.
3. Create the first column as a vector of numbers from 1 to 3.
4. Create the second column as a vector of characters.
5. Create the third column as a vector of logicals.
6. Always remember to close the function with a parenthesis.

::: {.callout-tip collapse="true"}
## Another way to write `tibble`
There is another equivalent way of writing it *rowwisely*. For example,:
```{r}
tribble( # <1>
  ~x, ~y, # <2>
  1, "a", # <3>
  2, "b", 
  3, "c"
)
```
1. Create a tibble rowwisely (note the function name is different from `tibble`).
2. Define the column names.
3. Define the first row.

This is perfect when typing in smaller datasets by hand.
:::

Tibbles come with plenty of benefits over base R’s classic `data frame`—particularly in how they track and preserve data types. You’ll notice each column explicitly labeled as `dbl` (double) or `chr` (character), which can save you from those frustrating mysteries where your numeric data gets disguised as text.

Tibbles also enforce a neat and consistent data layout, called `Tidy Data`, which is a godsend when you’re dealing with other people’s messy spreadsheets. Quoting from Hadley Wickham ([link](https://www.jstatsoft.org/article/view/v059i10)):

> Tidy datasets are easy to manipulate, model and visualize, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table.

![From https://r4ds.hadley.nz/data-tidy.html](img/datastructure_tibble2.png){width=100%}

We will learn more about working with `tibble` more in the next sections, but for now, let’s move on to our example dataset.

### Exercise
Create a tibble with the following columns:

- `name` with your name and surname
- `age` with your age
- `is_student` with a logical value
  
::: {.panel-tabset}
## Exercise
```{webr}
library(tidyverse)
info <- tibble(
  name = c("__", "__"),
  age = c(__, __),
  is_student = c(__, __)
)
info
```

## Solution
```webr
library(tidyverse)
info <- tibble(
  name = c("John Doe", "Jane Doe"),
  age = c(25, 30),
  is_student = c(TRUE, FALSE)
)
info
```
:::

## Our example dataset: `penguins`
We’ll soon learn how to import data (another comedic ordeal in itself), but for now, let’s borrow the `penguins` dataset from the `palmerpenguins` package. It covers three penguin species—Adelie, Chinstrap, and Gentoo—and gives us some useful variables to play with. Who doesn’t love penguins?

![Artwork by allison_horst](img/penguins.png)

First things first, let us load the `penguins` dataset.
```{r}
# install.packages("palmerpenguins")   # <1>
library(palmerpenguins) # <2>
data(package = "palmerpenguins") # <3>
```
1. If you have not installed the `palmerpenguins` package, you can install it by uncommenting this line.
2. Load the `palmerpenguins` package.
3. Load the `penguins` dataset.

## Take a Look at your Data
As a first rule, always, always take a look at your data.  The simplest way is simply to print it out:
```{r}
penguins # <1>
``` 
1. Display the `penguins` dataset.

This prints about the first couple rows of the dataset (another reason to love `tibble` over `data frame` in base R).

You may notice some `NA` values in the dataset. These are missing values, which are common in real-world datasets. We’ll learn how to handle them later.

## A more structured view
If you’d like a better view of your dataset, try the `skim()` function from the `skimr` package:
```{r}
pacman::p_load(skimr) # <1>
skim(penguins) # <2>
```
1. Load the `skimr` package.
2. Display the summary of the `penguins` dataset.

Think of `skim()` as your quick backstage pass, telling you how many rows, columns, missing values, and data types you’re dealing with. Trust me, a few seconds spent peeking at your data can save hours of confusion down the line.

### Exercise
`iris` is a widely-used dataset of plant traits. It is a default dataset in R. Take a look at the `iris` dataset using the `skim()` function.
  
::: {.panel-tabset}
## Exercise
```{webr}
library(___)
skim(___)
```

## Solution
```webr
library(skimr)
skim(iris)
```
:::