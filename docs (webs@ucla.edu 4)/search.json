[
  {
    "objectID": "05_aesmatic_mapping.html",
    "href": "05_aesmatic_mapping.html",
    "title": "5  A Detailed Look at Grammar of Graphics",
    "section": "",
    "text": "5.1 Aesthetic Mappings",
    "crumbs": [
      "Grammar of Graphics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>A Detailed Look at Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "05_aesmatic_mapping.html#aesthetic-mappings",
    "href": "05_aesmatic_mapping.html#aesthetic-mappings",
    "title": "5  A Detailed Look at Grammar of Graphics",
    "section": "",
    "text": "5.1.1 What is an Aesthetic?\nIn ggplot2, aesthetics are the magical connections between your data and how it looks on the plot. The aes() function is like the matchmaker that sets up these relationships. It maps variables in your data to visual properties in your plot. Thus, everything inside the aes() function should correspond to a column in your dataset.\nTo see this, let us again consider plotting the body_mass_g against the bill_depth_mm of the penguins dataset. Suppose we want to color all points blue:\n\nUsing Aesthetic Mapping for a Fixed ColorSetting Color Outside aes()\n\n\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(\n    data = penguins,\n    aes(\n        x = bill_length_mm,\n        y = bill_depth_mm \n    )\n) +\n1    geom_point(aes(color = \"blue\")) +\n    theme_minimal()\n\n\n1\n\nThe color aesthetic is set to “blue”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(\n    data = penguins,\n    aes(\n        x = bill_length_mm,\n        y = bill_depth_mm \n    ) \n) +\n1    geom_point(color = \"blue\") +\n    theme_minimal()\n\n\n1\n\nThe color is not within aes() function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAs we can see, the second option is correct. Because \"blue\" is not a variable in the penguins dataset, it is not a valid aesthetic mapping. Thus, the correct way to do it is to take the color as a non-aesthetic mapping.\n\n\n5.1.2 What can you map to?\nYou can map many aesthetics in ggplot2. We have already seen that:\n\nx and y for the x- and y-axis\ncolor for the color of the points. This is a big and very important topic. We will discuss it in more detail in the next section.\nshape for the shape of the points. There are 25 different shapes you can choose from (link). I admit that I google them every time I need to use them.\n\nThere are some other common aesthetics you can map to points in ggplot2:\n\nsize for the size of the points\nalpha for the transparency of the points. It ranges from 0 (completely transparent) to 1 (completely opaque)\n\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(data = penguins, \n    aes(x = bill_length_mm, y = bill_depth_mm)\n) +\n    geom_point(\n        aes(\n1            color = species,\n2            size = body_mass_g\n        ),\n3        alpha = 0.5,\n4        shape = 21,\n5        fill = \"white\"\n    ) +\n    theme_minimal()\n\n\n1\n\nThe species variable is mapped to the color aesthetic. Different species will have different colors.\n\n2\n\nThe body_mass_g variable is mapped to the size aesthetic. Different body masses will have different sizes.\n\n3\n\nThe alpha is the same for all. 0.5 makes the points semi-transparent.\n\n4\n\nThe shape is the same for all. This makes the points filled circles.\n\n5\n\nThe fill is the same for all. This makes the points white.\n\n\n\n\n\n\n\n\n\n\n\nIf you understand the above code, you would have a solid working knowledge of aesthetic mapping in ggplot2:\n\nWe see that two variables are mapped to the color and size aesthetics. This means that different species will have different colors and different body masses will have different sizes. Thus, you can map different variables to different aesthetics. This gives us great flexibility in how we can visualize our data.\nA mapped aesthetic will have a legend by default. This is always needed to interpret the plot. Two different aesthetics will have two different legends.\nBecause alpha, shape, and fill are set outside the aes() function, all points will have the same transparency, shape, and fill.\n\n\n\nExercise\n\nFix the Aesthetic Mapping. Run the following code. Identify the error and correct it.\n\n\nExerciseSolution\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\nalpha is incorrectly placed inside aes() because it is fixed, and size should be inside aes() as body_mass_g is a variable in the data.\n\n\n\n\nCustomize Aesthetics. Adjust the transparency (alpha) based on body_mass_g, change the shape based on island, and set all points to purple.\n\n\nExerciseSolution\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Grammar of Graphics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>A Detailed Look at Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "05_aesmatic_mapping.html#geometric-objects",
    "href": "05_aesmatic_mapping.html#geometric-objects",
    "title": "5  A Detailed Look at Grammar of Graphics",
    "section": "5.2 Geometric objects",
    "text": "5.2 Geometric objects\nGeometric objects (geoms) are the visual representations of your data. Think of them as the artists painting your data onto the canvas. For example, we have already used geom_point() to create a scatter plot. ggplot2 offers a variety of geoms (geom_*()) to create different types of plots. As an example, we can use a different geometric object for the same data above:\n\ngeom_point()geom_smooth()\n\n\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(\n    data = penguins,\n    aes(\n        x = bill_length_mm,\n        y = bill_depth_mm \n    ) \n) +\n1    geom_point() +\n    theme_minimal()\n\n\n1\n\nThe geom_point() function is used to create a scatter plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(\n    data = penguins,\n    aes(\n        x = bill_length_mm,\n        y = bill_depth_mm \n    ) \n) +\n1    geom_smooth() +\n    theme_minimal()\n\n\n1\n\nThe geom_smooth() function is used to create a smooth line that fits the trend of the data.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFor the two plots above, left and right have the same data, same axis, but different geometric objects. The left plot uses geom_point() to create a scatter plot, while the right plot uses geom_smooth() to create a smooth line that fits the trend of the data.\nYou can use more than one geometric object in a plot. For example, you can add a smooth line to the scatter plot:\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(\n    data = penguins,\n    aes(\n        x = bill_length_mm,\n        y = bill_depth_mm \n    ) \n) +\n1    geom_point() +\n2    geom_smooth() +\n    theme_minimal()\n\n\n1\n\nThe geom_point() function is used to create a scatter plot.\n\n2\n\nThe geom_smooth() function is used to create a smooth line that fits the trend of the data.\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\nWe want to explore the relationship between body_mass_g and flipper_length_mm. Please plot the data with both the points and a smooth trend line. What preliminary conclusions can you draw from the plot?\n\nExerciseSolution\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.",
    "crumbs": [
      "Grammar of Graphics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>A Detailed Look at Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "05_aesmatic_mapping.html#organizational-structure",
    "href": "05_aesmatic_mapping.html#organizational-structure",
    "title": "5  A Detailed Look at Grammar of Graphics",
    "section": "5.3 Organizational structure",
    "text": "5.3 Organizational structure\nThis is not something typiucally taught in length in the typical ggplot2 tutorial. I kindly learnt it from experience, through many scratching many heads with mysterious codes.\n\n5.3.1 Global vs Local Aesthetic Mapping\nTo show this, we introduce another aesthetic mapping: group. It is a central aes that is used to group data. For example, in the figure above, it is quite annoying that the smooth line desciebes the average trend across species, but we are often only intrested within species. We can group the data by species so that the smooth line is fitted to each species separately.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(\n    data = penguins,\n    aes(\n        x = bill_length_mm,\n        y = bill_depth_mm\n    ) \n) +\n    geom_point() + \n1    geom_smooth(aes(group = species)) +\n    theme_minimal()\n\n\n1\n\nThe species variable is mapped to the group aesthetic. This means that the smooth line will be fitted to each species separately.\n\n\n\n\n\n\n\n\n\n\n\nBut the figure itself is still not very informative as it is diffcult to tell which species is which. We can add a color aesthetic\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(\n    data = penguins,\n    aes(\n        x = bill_length_mm,\n        y = bill_depth_mm\n    ) \n) +\n    geom_point(aes(color = species)) + \n    geom_smooth(aes(group = species)) + \n    theme_minimal()\n\n\n\n\n\n\n\n\nHowever, it is annoying that the color only applies to the points, but not the smooth line. There are two ways to fix this.\n\nMapping species to color separatelyMapping species to color together\n\n\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(\n    data = penguins,\n    aes(\n        x = bill_length_mm,\n        y = bill_depth_mm\n    ) \n) +\n1    geom_point(aes(color = species)) +\n2    geom_smooth(aes(group = species, color = species)) +\n    theme_minimal()\n\n\n1\n\nThe species variable is mapped to the color aesthetic for the points.\n\n2\n\nThe species variable is mapped to the color aesthetic for the smooth line.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(\n    data = penguins,\n    aes(\n        x = bill_length_mm,\n        y = bill_depth_mm,\n1        group = species,\n        color = species\n    ) \n) +\n    geom_point() + \n    geom_smooth() +  \n    theme_minimal()\n\n\n1\n\nThe species variable is mapped to the color aesthetic in the beginning but not in the geom_point() or geom_smooth() functions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese two approaches produce the same results! In brief, what is included within the ggplot() function is applied to all geometric objects, while what is included within the geom_*() functions is only applied to that specific geometric object. A best practice is, whenver you are unsure, to include the aesthetic mapping in the geom_*() function.\n\n\n\n\n\n\nA cumbersome way (NOT RECOMMENDED)\n\n\n\n\n\nTo help you better understand, we can write quite cumbersome codes to achieve the same results :\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nggplot(\n    data = penguins\n) +\n    geom_point(\n        aes(\n            x = bill_length_mm,\n            y = bill_depth_mm,\n            group = species,\n            color = species\n        )\n    ) +\n    geom_smooth(\n        aes(\n            x = bill_length_mm,\n            y = bill_depth_mm,\n            group = species,\n            color = species\n        )\n    ) +\n    theme_minimal()\n\n\n\n\n\n\n\n\nAs we can see, even for x and y, they do not have to be included in the ggplot() function. They can be included in the geom_*() functions.\n\n\n\n\n\nExercise\nThis exercise aims to show you a common pitall in using ggplot2 with global vs local assignment.\n\nWe want is to plot a smooth lines grouped by island, and the points are colored by species. Run the following code and see what went wrong.\n\n\nExerciseSolution\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\nIssue: The smooth is working on species level, not on island level.\nCuause: geom_smooth took the color aesthetic from the global aes() function, and this messes up the local group aes, because color is inherentely a grouping aes.\n\n\n\n\n\nSolve the issue above.\n\n\nExerciseSolution\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\n\n\n\n\n5.3.2 Global vs Local Data\nThis is slightly more advanced, but it is good to know that the data = * argument can be set globally or locally. For example, I want to have the points for all species, but only the trend line for the Gentoo species.\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nggplot(\n    data = penguins,\n    aes(\n        x = bill_length_mm,\n        y = bill_depth_mm\n    ) \n) +\n    geom_point(aes(color = species)) + \n    geom_smooth(data = filter(penguins, species == \"Gentoo\")) + \n    theme_minimal()\n\n\n\n\n\n\n\n\nWe will explain what the filter() function does when we go to data wrangling. For now, just know that it is used to get the subset of data on species .",
    "crumbs": [
      "Grammar of Graphics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>A Detailed Look at Grammar of Graphics</span>"
    ]
  }
]