# Basics of R and RStudio

::: {.callout-note}
## Class Objectives
- Get R and RStudio up and running on your machine
- Learn how to install and load packages
:::

## Installing R and RStudio
Let’s begin at the most logical starting point: getting the software installed. To get started, I recommend this comprehensive [installation guide](https://datacarpentry.org/R-ecology-lesson/index.html) that will walk you through the process seamlessly.

## Why Do We Need RStudio?
Think of R as a high-performance engine—capable of incredible feats but not particularly user-friendly on its own. RStudio is the sleek vehicle that lets you harness that power efficiently. While you could interact with R through a basic terminal, RStudio's interface smoothly handles the otherwise clunky commands and makes certain tasks—like visualizing results or managing code—remarkably more accessible.

::: {.callout-tip collapse="true"}
## Alternative Options Worth Considering
Despite RStudio’s popularity, it is hardly the only game in town. [VSCode](https://code.visualstudio.com/) has emerged as a popular alternative—a versatile, general-purpose IDE that supports multiple programming languages. It's well-designed, feature-rich, and, importantly, free and open-source. Personally, I use VSCode for most of my R programming work.

Another option on the horizon is [Positron](https://positron.posit.co/), developed by the same innovative team behind RStudio. It's the modern evolution of RStudio, currently in beta but already showing great promise. It will eventually replace RStudio as the go-to IDE for R programming.
:::

RStudio is an incredible well-designed software that makes your life easier when working with R (and Python). It has a lot of features that make your life easier. We'll explore many of these features as we progress, starting with making your R code look better.

::: {.callout-tip}
## Making Your Code look prettier
One of the subtle joys of programming is crafting code that's not only functional but also aesthetically pleasing. To enhance the readability of your R scripts, consider installing the Fira Code font. Instruction can be found [here](https://github.com/tonsky/FiraCode/wiki/RStudio-instructions) and [here](https://firacode.org/using-fira-code-ligatures-in-rstudio/).

Another way to make your code more readable is to format the codes according to the [tidyverse style guide](https://style.tidyverse.org/). Of course, no one wants to memorize all. Luckily, you can use the `styler` package to do this as an addin in RStudio ([link](https://styler.r-lib.org/)).
:::

## Getting R to Work for You
In the grand tradition of programming tutorials, let's start with the classic "Hello, World!"—a humble beginning to our journey with R.
```{r}
print("Hello, World!") # <1>
```
1. The `print()` function displays the text within on the console.

Next, you can use R as a straightforward calculator:
```{r}
3 + 2
```

You can also store results in variables (so you can use them later):
```{r}
x <- 3 + 2 # <1>
x       # <2>
```
1. Assigns the value of `3 + 2` to the variable `x`.
2. The `x` displays the value of `x` on the console.

::: {.callout-tip collapse="true"}
## Why does R use `<-`?
In R, `<-` is for assignment while `=` is for function arguments. You can technically use `=` for assignment in almost all cases, meaning `x <- 3 + 2` is equivalent to `x = 3 + 2`. But then why does R continue to favor `<-`?

One reason is conceptual clarity. In R, the distinction between assignment and function arguments is explicit, providing a cleaner syntax and helping avoid ambiguity in complex code. By differentiating assignment with `<-`, R signals that an action is being performed, where data is transferred from one entity to another. This reinforces the principle that assignment and function arguments are inherently distinct constructs.

A second reason is flexibility. R allows for the reverse assignment arrow, `->`, which lets you assign values in the opposite direction. For instance, `3 -> x` assigns the value `3` to `x`, a feature that can sometimes be handy.

But why don’t most other languages use a similar convention? One factor is typing efficiency: `<-` requires three keystrokes, while `=` only requires one (although you eventually get used to it). However, there’s also a historical element here: early keyboards designed for statistical computing actually had a dedicated `<-` key, which made the operator as convenient as `=` ([source](https://colinfay.me/r-assignment/)):

![](img/rbasic_keyboard.png)
:::

### Exercise 
1. Create a variable `y` and assign it the value of `5 * 3`. Then display the value of `y` on the console.

::: {.panel-tabset}
## Exercise
```{webr} 
__ <- __ * __
__
```

## Solution
```webr
y <- 5 * 3
y
```
:::

2. Create a variable `z` that is half of the value of `y`, and then display the value of `z` on the console.

::: {.panel-tabset}
## Exercise
```{webr}
__ <- __ / __
__
```

## Solution
```webr
z <- y / 2
z
```
:::

## Installing Packages
### Standard approach
To unlock R's full potential, you'll often need to install additional packages—think of them as apps that extend your smartphone's capabilities. This is a one-time process for each package on your computer. For example, to install the `ggplot2` package:
```{r}
#| eval: false
install.packages("ggplot2")
```

After that, simply load it when you need it:
```{r}
#| warning: false
library(ggplot2)
```

::: {.callout-warning collapse="true"}
## A Quirk to Watch Out For
This is the first design inconsistencies when using R: when installing a package, you enclose its name in quotes, but when loading it, you don't. It's a small quirk, but one that can trip you up if you're not careful (speaking from experience :-(

There will be many others along the way. I will try to point them out as we go along.
:::

::: {.callout-tip}
## Not All Packages Are on CRAN
Notably, not all packages are on CRAN. For example, many of them are on GitHub, GitLab, or other platforms. To install these packages, you can use the devtools package. For example, to install the `ggthemr` package from GitHub:
```{r}
#| eval: false
# install.packages("devtools") # <1>
library(devtools) # <2>
devtools::install_github("cttobin/ggthemr") # <3>
```
1. Install the devtools package.
2. Load the devtools package.
3. Install the ggthemr package from GitHub.
:::

### An alternative approach
I prefer to use a different strategy. Consider using the `pacman` package. It automatically detects if the pointed package is installed and installs it if it's not, and then  load it. Here's how you can use it:

```{r}
# install.packages("pacman") # <1>
library(pacman) # <2>
p_load(ggplot2) # <3>
```
1. Keep in mind that you'll need to install pacman first, as it's not part of R's base packages.
2. Load the pacman package.
3. Use `p_load()` to install and load the ggplot2 package in one go.

This can greatly simplify things when **sharing** code. You don’t have to wonder whether a particular library is installed on someone else’s system—`p_load()` handles it gracefully.

Better yet, for best practice, I strongly recommend the following command:
```{r}
pacman::p_load(ggplot2) # <1>
```
1.  `p_load()` function is called from the `pacman` package

What is this mysterious `::` here? It simply means that we are loading the `p_load()` function from the `pacman` package. It allows you to access a function from a package without loading the entire package. This can help avoid conflicts with other packages that might have a similarly named function (which is a huge source for hidden errors!).


### Exercise: Installing Packages
Install the package `gt` using either the standard method or the `pacman` method.

::: {.panel-tabset}
## Exercise
```{webr}
install.packages(__)
pacman::p_load(___)
```

## Solution
```webr
install.packages("gt")
pacman::p_load(gt)
```
:::

## Meet the Tidyverse
As stated in its official [website](https://www.tidyverse.org/):

> The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. 

Installing it may take a bit:
```{r}
#| eval: false
install.packages("tidyverse")
```

Once done, loading it is straightforward and a common part of most R scripts (I usually begin nearly all my scripts with this line):
```{r} 
library(tidyverse)
```

As you can see, Looking at the message generated by executing the above line, we see that nine packages are now loaded. They are called `ggplot2`, `tibble`, and so on. We will get to know these in more detail throughout the class. 

::: {.callout-warning collapse="true"}
## What does conflicts message mean?
As you can see from the message, it shows what conflicts are there. The two conflicts are horrible design choices in tidyverse. Many mysterious bugs happen because of these conflicts. To avoid these, you can use the following code:
```{r} 
#| eval: false
library(conflicted)  # <1>
library(tidyverse)  # <2>
conflict_prefer("filter", "dplyr") # <3>
conflict_prefer("lag", "dplyr") # <4>
```
1. Load the `conflicted` package.
2. Load the `tidyverse` package.
3. This code says that if there is a conflict on `filter`, always prefer `dplyr`.
4. This code says that if there is a conflict on `lag`, always prefer `dplyr`.

Another way is to just write your code using the `package::funcion()` format:
```{r}
#| eval: false
dplyr::filter()
dplyr::lag()
```
Given how often you'll use these functions, I find it annoying with this approach. But it's a personal choice.
:::


::: {.callout-tip collapse="true"}
## Want to avoid the annoying messages?
If you do not want to see the messages (although I do not recommend), you can use the `suppressPackageStartupMessages()` function. For example, you can use the following code to load the `tidyverse` package:
```{r}
suppressPackageStartupMessages(library(tidyverse))
```

This approach hides the typical start-up output, though it remains entirely optional.
:::

We’ll rely on the tidyverse extensively throughout this course.

