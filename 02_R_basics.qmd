<!-- <style>
.column { padding-right: 3ex }
.column + .column { padding-left: 0ex }
</style> -->

# Basics of R and RStudio

::: {.callout-note}
## Class Objectives
- Get R and RStudio up and running on your machine
- Learn how to install and load packages
:::

## Installing R and RStudio
To get started, I recommend this comprehensive [installation guide](https://datacarpentry.org/R-ecology-lesson/index.html) that will walk you through the process seamlessly.

## What Exactly Is RStudio?
Think of R as a high-performance engine, capable of incredible feats but not particularly user-friendly on its own. RStudio is the well-designed vehicle that lets you harness that power efficiently. While you could interact with R through a basic terminal (much like driving a sports car without a dashboard), RStudio provides an intuitive interface that makes your life easier.

::: {.callout-tip collapse="true"}
## Alternative Options Worth Considering
While RStudio is a remarkable tool, it's not the only option out there. [VSCode](https://code.visualstudio.com/) has emerged as a popular alternative—a versatile, general-purpose IDE that supports multiple programming languages. It's well-designed, feature-rich, and, importantly, free and open-source. Personally, I use VSCode for most of my R programming work.

Another option on the horizon is [Positron](https://positron.posit.co/), developed by the same innovative team behind RStudio. It's the modern evolution of RStudio, currently in beta but already showing great promise. It will eventually replace RStudio as the go-to IDE for R programming.
:::

RStudio is an incredible well-designed software that makes your life easier when working with R (and Python). It has a lot of features that make your life easier. We will explore many of the features as we go along. The first feature is to make your R code look better.

::: {.callout-tip}
## Making R look prettier
One of the subtle joys of programming is crafting code that's not only functional but also aesthetically pleasing—call it the art of code. To enhance the readability of your R scripts, consider installing the Fira Code font. Instruction can be found [here](https://github.com/tonsky/FiraCode/wiki/RStudio-instructions) and [here](https://firacode.org/using-fira-code-ligatures-in-rstudio/).
:::

## Getting R to Work for You
In the grand tradition of programming tutorials, let's start with the classic "Hello, World!"—a humble beginning to our journey with R.
```{r}
print("Hello, World!") # <1>
```
1. The `print()` function displays the text within on the console.

You can use it as a calculator
```{r}
2 + 2
```

## Installing Packages: Expanding R's Horizons
To unlock R's full potential, you'll often need to install additional packages—think of them as apps that extend your smartphone's capabilities. This is a one-time process for each package on your computer. For example, to install the `ggplot2` package:
```{r}
#| eval: false
install.packages("ggplot2")
```

And when you want to use the package, just use `library()`.
```{r}
#| warning: false
library(ggplot2)
```

::: {.callout-tip}
## A Quirk Worth Mentioning
Here's one of many design inconsistencies we will run into when using R: when installing a package, you enclose its name in quotes, but when loading it, you don't. 

To streamline your workflow, consider using the `pacman` package. It automatically detects if the pointed package is installed and installs it if it's not, and then  load it. Here's how you can use it:

```{r}
# install.packages("pacman") # <1>
library(pacman) # <2>
p_load(ggplot2) # <3>
```
1. Keep in mind that you'll need to install pacman first, as it's not part of R's base packages.
2. Load the pacman package.
3. Use `p_load()` to install and load the ggplot2 package in one go.

:::

## Meet the tidyverse
As descirbed in the officical [website](https://www.tidyverse.org/):

> The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. 

```{r}
library(tidyverse)
```
As you can see, Looking at the message generated by executing the above line, we see that nine packages are now loaded.1 They are called ggplot2, tibble, and so on. We will get to know these in more detail throughout the book. Almost all my codes start with the command.
