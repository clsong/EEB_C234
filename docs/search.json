[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EE BIOL C234",
    "section": "",
    "text": "Weclome\nWelcome to EE BIOL C234: Practical Computing for Evolutionary Biologists and Ecologists—or, as I like to say, a crash course in “computational Kung-Fu”.",
    "crumbs": [
      "Weclome"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "dplyr.html",
    "href": "dplyr.html",
    "title": "Title",
    "section": "",
    "text": "There are difficult things in programming: naming and cache."
  },
  {
    "objectID": "dplyr.html#pipe",
    "href": "dplyr.html#pipe",
    "title": "Title",
    "section": "",
    "text": "There are difficult things in programming: naming and cache."
  },
  {
    "objectID": "01_intro.html",
    "href": "01_intro.html",
    "title": "\n1  Course goal\n",
    "section": "",
    "text": "1.1 Why Bother with This Course in the Age of AI?\nAlright, let’s cut to the chase. You signed up to study Ecology and Evolutionary Biology, not Computer Science. You probably envision yourself out in the field, knee-deep in mud, observing the subtle interactions of ecosystems—not stuck behind a screen, wrestling with semicolons and syntax errors. And now, with these fancy new AI tools that seem to do everything but your taxes, you might be wondering: why bother learning this computational stuff at all? Can’t a chatbot handle it all—generate analyses, whip up some plots, and call it a day?\nIt’s a fair question. Technology is reshaping everything, and science is no exception. But here’s the thing: just as biologists in the past had to master the microscope, today’s biologists need a strong foundation in computing. This course isn’t about turning you into a programmer; it’s about giving you the keys to harness technology effectively—so you’re steering the ship, not just along for the ride.\nAnd about those AI tools? Yes, they can be incredibly useful, no doubt. But relying on them blindly, without understanding the underlying principles, is like cooking from a recipe in a language you barely know. Sure, you might finish the dish, but there’s a good chance you’ll miss something critical—maybe misinterpret a step, add the wrong ingredient, or be puzzled by the end result. Computational literacy helps you to catch when the AI is leading you astray, saving you from headaches (and potentially flawed results) down the line.\nI get the temptation of the “easy button”, we all do. But investing in these skills now will pay off many times over. You’ll be a more efficient, more confident researcher—and, franky, it will boost your chances of publishing in those coveted high-profile journals.\nBefore any anxiety sets in, let me assure you that this course isn’t a sink-or-swim experience. We’ll embark on a guided journey into computing, building your skills step by step. Think of it as learning a new language—with much simpler grammar, thankfully. We’ll use concrete example with annonated codes and hands-on exercises to support you along the way.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Course goal</span>"
    ]
  },
  {
    "objectID": "01_intro.html#why-take-this-course-in-the-age-of-ai",
    "href": "01_intro.html#why-take-this-course-in-the-age-of-ai",
    "title": "Introduction",
    "section": "",
    "text": "Okay, let’s be honest. You signed up to study Ecology and Evolutionary Biology, not Computer Science. You probably envision yourself out in the field, knee-deep in mud, observing the subtle interactions of ecosystems—not stuck behind a screen, wrestling with semicolons and syntax errors. And now, with these fancy new AI tools that seem to do everything but your taxes, you might be wondering: why bother learning this stuff at all? Can’t a chatbot handle it all—generate analyses, whip up some plots, and call it a day?\nWell, you’re not wrong to wonder. Technology is reshaping everything, and science is no exception. But here’s the thing: just as biologists in the past had to master the microscope, today’s biologists need a strong foundation in computing. This course isn’t about turning you into a programmer; it’s about equipping you with the skills to make technology work for you—so you’re the one in control.\nAnd don’t worry, this class won’t throw you into the deep end. We’re going step by step, almost like learning a new language. (Good news: coding languages are much easier than human languages!) Examples, exercises, and patience will be our path.\nNow, back to those AI tools. Yes, they’re handy, but relying on it without understanding the basics is like cooking from a recipe in a language you barely know. Sure, you might finish the dish, but there’s a good chance you’ll miss something critical—maybe misinterpret a step, add the wrong ingredient, or end up with a surprise result. Becoming computationally literate helps you recognize when AI has gone off track, saving you from mess you’d rather avoid.\nI get the allure of the “easy button.” But investing in these skills now will pay off many times over. You’ll be a more efficient, happier researcher—and, franky, it will increase your chances of publishing in high-profile journals."
  },
  {
    "objectID": "01_intro.html#what-youll-learn",
    "href": "01_intro.html#what-youll-learn",
    "title": "\n1  Course goal\n",
    "section": "\n1.2 What You’ll Learn",
    "text": "1.2 What You’ll Learn\nWe’ll cover the following topics, which are, in my view, the most essential computing skills for modern ecologists. In some sense, these are what I wish I had the chance to learn in the beginning of my grad school.\n\n1.2.1 Fluency with R\nWhat is our weapon of choice in this course? The R programming language. It is not the most well-polished language. It is not the fastest language. It is not the most user-friendly language. So, why R? Well, it is the lingua franca in our community. The computational tools in ecology are largely R-based. So, if you want to tap into this wealth, you’ll need a working knowledge of R.\n\n\n\n\n\n\nFeeling Adventurous?\n\n\n\n\n\nNot sold on R? You could try Julia, a newer language that’s faster, more elegant, and gaining popularity. The syntax is similar enough to R to make it a relatively easy transition, and it can even load R packages, so you can have the best of both worlds.\n\n\n\nR has also evolved dramatically in the past decade with the rise of the tidyverse suite. When I started grad school, I absolutely hated using R. But the tidyverse transformed that experience. It introduced a coherent way of handling and visualizing data—one that feels logical and intuitive. I firmly believe it’s the right approach to data manipulation and plotting.\n\n\n\n\n\n\nHeroes Behind the Tidyverse?\n\n\n\n\n\nThe tidyverse revolution is largely thanks to Hadley Wickham, whose contributions earned him the COPSS Presidents’ Award, the top honor in statistics.\nBut it’s not a one-person show—the tidyverse thrives because of a vibrant community united by a shared vision (link).\n\n\n\n\n1.2.2 Crafting Publication-Ready Figures\nWith ggplot2, you’ll learn the Grammar of Graphics, one of the most powerful plotting systems out there. Beyond just producing high-quality figures, it will teach you a structured approach to data visualization.\nWhile ggplot2 is powerful, its defaults aren’t always perfect. We’ll cover design principles that enhance both the appeal and informativeness of your figures. This skill is quite useful—after all, figures often make the first impression on your readers. By the end of the course, you’ll be capable of creating figures like this: By the end of the course, you’ll be capable of creating figures like this:\n\n\nby Cédric Scherer\n\n\n1.2.3 The Art of Data Wrangling\nIn our daily research, data is rarely neat. Before you can start analyzing, you’ll likely spend hours organizing it into a usable format. Fortunately, dplyr and tidyr simplify this process, turning data wrangling into a clear, logical workflow.\nTo get a quick taste, let us imagine describing your morning routine. In base R, it might look like a convoluted nest of functions:\n\neat(dressed(shower(brush(wakeup(you)))))\n\nOr, a series of perplexing intermediate variables:\n\nyou_w &lt;- wakeup(you)\nyou_bw &lt;- brush(you_w)\nyou_sbw &lt;- shower(you_bw)\n...\n\nWith dplyr, however, it transforms into a straightforward, logical flow:\n\nyou |&gt; \n  wakeup() |&gt; \n  brush() |&gt; \n  shower() |&gt; \n  get_dressed() |&gt; \n  eat() \n\nIn the tidyverse ecosystem, each step of data manipulation is transparent, easy to follow, and, crucially, easy to debug. We’ll introduce you to a core set of verbs—fewer than ten—that will handle over 90% of everyday tasks. You see, coding languages are indeed simpler than human languages!\n\n1.2.4 Scientific typsetting\nBut when it comes to updating figures, managing references, or maintaining consistent layouts, it can quickly turn into a labyrinthine headache. The core issue is that Word is a WYSIWYG editor—What You See Is What You Get (a weird acronym, I know).\nThe problem with WYSIWYG editors is that they often require manual tweaks—nudging an image here, adjusting a margin there—which not only consumes valuable time but also opens the door to errors. This is why separating content from layout is a strategy worth adopting. Instead of wrestling with formatting, you focus on the substance of your work—the data, the analysis, the insights—and let the tools handle the presentation.\nWhile there are several tools for this purpose (including the notorious LaTeX), we’ll focus on Quarto, a modern document preparation system tailored for researchers. Quarto allows you to seamlessly integrate code, references, and figures, producing professional outputs in submission-ready formats like Word or LaTeX with minimal effort. By the end of this course, you’ll be able to generate documents like this with a single click in R:\n\n\nby LaPreprint\n\nWhile Quarto is powerful, sometimes you need specialized tools for optimal layout. LaTeX is one option, but it can feel outdated and cumbersome. We’ll briefly explore Typst, a modern alternative that offers the sophistication of LaTeX without the steep learning curve. It provides a user-friendly way to create beautiful, publication-ready documents, which I believe will replace LaTeX in the near future.\n\n1.2.5 Reproducible Research\nAs a data editor for a journal, I’m often struck by how many papers are challenging to reproduce—which I see as a huge problem for science. In this course, you’ll learn to make your research fully reproducible, which benefits not only the scientific community but also you—it makes it easier to revisit and build upon your work.\n\n\nPhD comics by Jorge Cham\n\nWe’ll get into version control using Git and GitHub, tools that help you track changes, back up your work, and collaborate effectively. Additionally, we’ll cover specific techniques in R that support reproducible workflows, ensuring your research stands on a solid foundation.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Course goal</span>"
    ]
  },
  {
    "objectID": "ggplot_basic.html",
    "href": "ggplot_basic.html",
    "title": "2  Grammar of Graphics",
    "section": "",
    "text": "We will use a dataset called penguins from the palmerpenguins package. We will use this dataset throughout our course. This dataset contains measurements of penguins collected from three species: Adelie, Chinstrap, and Gentoo.\n\n\n\nArtwork by allison_horst\n\n\nFirst things first, let us load the penguins dataset.\n\n1# install.packages(\"palmerpenguins\")\n2library(palmerpenguins)\n3data(package = \"palmerpenguins\")\n\n\n1\n\nIf you have not installed the palmerpenguins package, you can install it by uncommenting this line.\n\n2\n\nLoad the palmerpenguins package.\n\n3\n\nLoad the penguins dataset.\n\n\n\n\nAs a first rule, always, always take a look at your data.\n\n1penguins\n\n\n1\n\nDisplay the penguins dataset.\n\n\n\n\n\n  \n\n\n\nThe data format we are using is called tibble. It is a modern version of the data.frame in R. It is part of the tidyverse package. For most of your daily works, tibble is the only two formats (the other is vector) you need to know.\nThen we quickly visualize the data using the ggplot2 package. Suppose we want to see how the flipper length of penguins (encoded as flipper_length_mm in the dataset) is related to their body mass (encoded as body_mass_g).\n\n1library(ggplot2)\nggplot(\n2  data = penguins,\n3  aes(x = flipper_length_mm, y = body_mass_g)\n) + \n4  geom_point()\n\n\n1\n\nLoad the ggplot2 package.\n\n2\n\nSpecify the dataset used in the plot.\n\n3\n\nDefine the aesthetics of the plot. Here, we map the flipper length to the x-axis and body mass to the y-axis.\n\n4\n\nAdd a layer of points to the plot.\n\n\n\n\n\n\n\n\n\n\n\nOf course, this is just the beginning. To give you a sense of how to visualize it better, this would be the goal:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, this book has no content whatsoever."
  },
  {
    "objectID": "R_basics.html",
    "href": "R_basics.html",
    "title": "R and RStudio",
    "section": "",
    "text": "Class Objective\n\n\n\n\nTo install R and RStudio\nGet R to do basic math\n\n\n\nWhat is our weapon of choice in this endeavor? The R programming language.\nR is undoubtably the most used language among ecologists. It is not the most well-defined language. It is not the most efficient language. It is not the most user-friendly language. But it is the most used language in our community. Most packages in ecology are written in R, and most ecologists use R. So, if you want to be able to use the tools that are available, you need to learn R, at least how R is.And that is a good reason to learn it.\n\n\n\n\n\n\nTip\n\n\n\nIf you are serious about computing, then learn Julia, which is much better designed and fast.\n\n\nMost imortantly, in the last decade, R has undergone a revolution with the advent of the tidyverse. When I started grad school, I had almost no experience with programming, and I absolutely hated using R. However, learning tiduyverse has completely changed how I felt about this language. It is the right way of thinking about data manipulation and plot, and yes, I meant the.\nThis revolution largely thanks to Hadley Wickham. Because of his revoluntionary contribution, he has been awarded COPSS Presidents’ Award-the most imoportant award given to a statistican.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTo make RStuido look better, you may want to install the fira font. Instruction can be found here and here."
  },
  {
    "objectID": "R_basics.html#installing-rstudio",
    "href": "R_basics.html#installing-rstudio",
    "title": "R and RStudio",
    "section": "",
    "text": "Tip\n\n\n\nTo make RStuido look better, you may want to install the fira font. Instruction can be found here and here."
  },
  {
    "objectID": "02_R_basics.html",
    "href": "02_R_basics.html",
    "title": "2  Basics of R and RStudio",
    "section": "",
    "text": "2.1 Installing R and RStudio\nTo get started, I recommend this comprehensive installation guide that will walk you through the process seamlessly.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#installing-rstudio",
    "href": "02_R_basics.html#installing-rstudio",
    "title": "2  R and RStudio",
    "section": "2.2 Installing RStudio",
    "text": "2.2 Installing RStudio\n\n\n\n\n\n\nTip\n\n\n\nTo make RStuido look better, you may want to install the fira font. Instruction can be found here and here.\nWithout Fira, you code could look like this:\n\nx",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#a-simple-calculation",
    "href": "02_R_basics.html#a-simple-calculation",
    "title": "2  Basics of R and RStudio",
    "section": "2.3 A simple calculation",
    "text": "2.3 A simple calculation",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#install-r-packages",
    "href": "02_R_basics.html#install-r-packages",
    "title": "2  Basics of R and RStudio",
    "section": "2.4 Install R packages",
    "text": "2.4 Install R packages",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#installing-r-and-rstudio",
    "href": "02_R_basics.html#installing-r-and-rstudio",
    "title": "2  Basics of R and RStudio",
    "section": "",
    "text": "Making R look prettier\n\n\n\nTo make R codes look better, you may want to install the fira font. Instruction can be found here and here.\n\n\n\n# Without Fira code\nx &lt;- 5  |&gt; \n    sqrt() |&gt; \n    round(2)\n\n\n# With Fira code\nx &lt;- 5  |&gt; \n    sqrt() |&gt; \n    round(2)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#load-data",
    "href": "02_R_basics.html#load-data",
    "title": "2  Basics of R and RStudio",
    "section": "2.5 Load data",
    "text": "2.5 Load data\n\n\n\n\n\n\nName cleaner\n\n\n\njanitor::clean_names()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "03_ggplot_basic.html",
    "href": "03_ggplot_basic.html",
    "title": "3  Grammar of Graphics",
    "section": "",
    "text": "3.1 Why Graphs?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#install-rstudio",
    "href": "02_R_basics.html#install-rstudio",
    "title": "2  Basics of R and RStudio",
    "section": "2.2 Install RStudio",
    "text": "2.2 Install RStudio",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#why-rstudio",
    "href": "02_R_basics.html#why-rstudio",
    "title": "\n2  Basics of R and RStudio\n",
    "section": "\n2.2 Why RStudio",
    "text": "2.2 Why RStudio\nRStudio is something known as IDE, Integrated development environment. It is an incredible well-designed software that makes your life easier when working with R (and Python). It has a lot of features that make your life easier.\n\n\n\n\n\n\nAlternative IDEs\n\n\n\nVSCode is the most popular alternative to RStudio. It is a general-purpose IDE that can be used for many programming languages. It is also very well designed and has a lot of features. It is also free and open-source. I personally use it for R instead of RStudio.\nANother alternivat is Positron, developed by the same company that develops RStudio. It is the modern version of RStudio. It is still in beta, but it is already very good.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#meet-tidyverse",
    "href": "02_R_basics.html#meet-tidyverse",
    "title": "\n2  Basics of R and RStudio\n",
    "section": "\n2.5 Meet Tidyverse",
    "text": "2.5 Meet Tidyverse",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#get-r-to-work",
    "href": "02_R_basics.html#get-r-to-work",
    "title": "\n2  Basics of R and RStudio\n",
    "section": "\n2.3 Get R to work",
    "text": "2.3 Get R to work\nJust like every programming textvook, we will satert with\n\nprint(\"Hello, World!\")\n\n[1] \"Hello, World!\"\n\n\nYou can use it as a calculator\n\n2 + 2\n\n[1] 4",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#section",
    "href": "02_R_basics.html#section",
    "title": "\n2  Basics of R and RStudio\n",
    "section": "\n2.4 ",
    "text": "2.4 \n\n\n\n\n\n\nMaking R look prettier\n\n\n\nTo make R codes look better, you may want to install the fira font. Instruction can be found here and here.\n\n\n\n# Without Fira code\nx &lt;- 5  |&gt; \n    sqrt() |&gt; \n    round(2)\n\n\n# With Fira code\nx &lt;- 5  |&gt; \n    sqrt() |&gt; \n    round(2)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#what-is-rstudio",
    "href": "02_R_basics.html#what-is-rstudio",
    "title": "\n2  Basics of R and RStudio\n",
    "section": "\n2.2 What is RStudio",
    "text": "2.2 What is RStudio\nR and RStudio are complementary, but they are not the same thing. R is like an engine and RStudio is like a car—we can use engines in a lot of different situations (like in a terminal), but the combination is especially useful.\n\n\n\n\n\n\nAlternative choices\n\n\n\n\n\nVSCode is the most popular alternative to RStudio. It is a general-purpose IDE that can be used for many programming languages. It is also very well designed and has a lot of features. It is also free and open-source. I personally use it for R instead of RStudio.\nANother alternivat is Positron, developed by the same company that develops RStudio. It is the modern version of RStudio. It is still in beta, but it is already very good.\n\n\n\nRStudio is an incredible well-designed software that makes your life easier when working with R (and Python). It has a lot of features that make your life easier. We will explore many of the features as we go along. The first feature is to make your R code look better.\n\n\n\n\n\n\nMaking R look prettier\n\n\n\nTo make R codes look better, you may want to install the fira font. Instruction can be found here and here.\n\n\n\n# Without Fira code\nx &lt;- 5  |&gt; \n    sqrt() |&gt; \n    round(2)\n\n\n# With Fira code\nx &lt;- 5  |&gt; \n    sqrt() |&gt; \n    round(2)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#install-packages",
    "href": "02_R_basics.html#install-packages",
    "title": "\n2  Basics of R and RStudio\n",
    "section": "\n2.4 Install packages",
    "text": "2.4 Install packages\nTo install a package on your computer (again, we will need to do this only once per computer) we use install.packages().\n\ninstall.packages(\"ggplot2\")\n\nAnd then when we want to use the package, we use library().\n\nlibrary(ggplot2)\n\n\n\n\n\n\n\ns\n\n\n\nThis is the first design issue in R. Why install pacjkage requires ““, but then load them you don’t. As I have mentioned, R is really an old language, and was designed for statisticians (not general purpose in mind).\nA general solution to this is to use the pacman package. It is a package that makes it easier to install and load packages. It is not a base package, so you will need to install it first.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#meet-the-tidyverse",
    "href": "02_R_basics.html#meet-the-tidyverse",
    "title": "2  Basics of R and RStudio",
    "section": "2.5 Meet the tidyverse",
    "text": "2.5 Meet the tidyverse\nAs descirbed in the officical website:\n\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\n\n\nlibrary(tidyverse)\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ lubridate 1.9.3     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.1\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nAs you can see, Looking at the message generated by executing the above line, we see that nine packages are now loaded.1 They are called ggplot2, tibble, and so on. We will get to know these in more detail throughout the book. Almost all my codes start with the command.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#what-exactly-is-rstudio",
    "href": "02_R_basics.html#what-exactly-is-rstudio",
    "title": "2  Basics of R and RStudio",
    "section": "2.2 What Exactly Is RStudio?",
    "text": "2.2 What Exactly Is RStudio?\nThink of R as a high-performance engine, capable of incredible feats but not particularly user-friendly on its own. RStudio is the well-designed vehicle that lets you harness that power efficiently. While you could interact with R through a basic terminal (much like driving a sports car without a dashboard), RStudio provides an intuitive interface that makes your life easier.\n\n\n\n\n\n\nAlternative Options Worth Considering\n\n\n\n\n\nWhile RStudio is a remarkable tool, it’s not the only option out there. VSCode has emerged as a popular alternative—a versatile, general-purpose IDE that supports multiple programming languages. It’s well-designed, feature-rich, and, importantly, free and open-source. Personally, I use VSCode for most of my R programming work.\nAnother option on the horizon is Positron, developed by the same innovative team behind RStudio. It’s the modern evolution of RStudio, currently in beta but already showing great promise. It will eventually replace RStudio as the go-to IDE for R programming.\n\n\n\nRStudio is an incredible well-designed software that makes your life easier when working with R (and Python). It has a lot of features that make your life easier. We will explore many of the features as we go along. The first feature is to make your R code look better.\n\n\n\n\n\n\nMaking R look prettier\n\n\n\nOne of the subtle joys of programming is crafting code that’s not only functional but also aesthetically pleasing—call it the art of code. To enhance the readability of your R scripts, consider installing the Fira Code font. Instruction can be found here and here.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#getting-r-to-work-for-you",
    "href": "02_R_basics.html#getting-r-to-work-for-you",
    "title": "2  Basics of R and RStudio",
    "section": "2.3 Getting R to Work for You",
    "text": "2.3 Getting R to Work for You\nIn the grand tradition of programming tutorials, let’s start with the classic “Hello, World!”—a humble beginning to our journey with R.\n\nprint(\"Hello, World!\")\n\n[1] \"Hello, World!\"\n\n\nYou can use it as a calculator\n\n2 + 2\n\n[1] 4",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#installing-packages-expanding-rs-horizons",
    "href": "02_R_basics.html#installing-packages-expanding-rs-horizons",
    "title": "2  Basics of R and RStudio",
    "section": "2.4 Installing Packages: Expanding R’s Horizons",
    "text": "2.4 Installing Packages: Expanding R’s Horizons\nTo unlock R’s full potential, you’ll often need to install additional packages—think of them as apps that extend your smartphone’s capabilities. This is a one-time process for each package on your computer. For example, to install the ggplot2 package:\n\ninstall.packages(\"ggplot2\")\n\nAnd when you want to use the package, just use library().\n\nlibrary(ggplot2)\n\n\n\n\n\n\n\nA Quirk Worth Mentioning\n\n\n\nHere’s one of many design inconsistencies we will run into when using R: when installing a package, you enclose its name in quotes, but when loading it, you don’t.\nTo streamline your workflow, consider using the pacman package. It automatically detects if the pointed package is installed and installs it if it’s not, and then load it. Here’s how you can use it:\n\n1# install.packages(\"pacman\")\n2library(pacman)\n3p_load(ggplot2)\n\n\n1\n\nKeep in mind that you’ll need to install pacman first, as it’s not part of R’s base packages.\n\n2\n\nLoad the pacman package.\n\n3\n\nUse p_load() to install and load the ggplot2 package in one go.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "03_ggplot_basic.html#our-dataset-penguins",
    "href": "03_ggplot_basic.html#our-dataset-penguins",
    "title": "3  Grammar of Graphics",
    "section": "3.2 Our dataset: penguins",
    "text": "3.2 Our dataset: penguins\nWe will use a dataset called penguins from the palmerpenguins package. We will use this dataset throughout our course. This dataset contains measurements of penguins collected from three species: Adelie, Chinstrap, and Gentoo.\n\n\n\nArtwork by allison_horst\n\n\nFirst things first, let us load the penguins dataset.\n\n1# install.packages(\"palmerpenguins\")\n2library(palmerpenguins)\n3data(package = \"palmerpenguins\")\n\n\n1\n\nIf you have not installed the palmerpenguins package, you can install it by uncommenting this line.\n\n2\n\nLoad the palmerpenguins package.\n\n3\n\nLoad the penguins dataset.\n\n\n\n\nAs a first rule, always, always take a look at your data. One way is just to display the data.\n\n1penguins\n\n\n1\n\nDisplay the penguins dataset.\n\n\n\n\n\n  \n\n\n\nThe data format we are using is called tibble. It is a modern version of the data.frame in R. It is part of the tidyverse package. For most of your daily works, tibble is the only two formats (the other is vector) you need to know.\nHowever, if you want to see the data in a more structured way, you can use the skim() function in the package skimr.\n\n1pacman::p_load(skimr)\n2skim(penguins)\n\n\n1\n\nLoad the skimr package.\n\n2\n\nDisplay the summary of the penguins dataset.\n\n\n\n\n\nData summary\n\n\nName\npenguins\n\n\nNumber of rows\n344\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nspecies\n0\n1.00\nFALSE\n3\nAde: 152, Gen: 124, Chi: 68\n\n\nisland\n0\n1.00\nFALSE\n3\nBis: 168, Dre: 124, Tor: 52\n\n\nsex\n11\n0.97\nFALSE\n2\nmal: 168, fem: 165\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nbill_length_mm\n2\n0.99\n43.92\n5.46\n32.1\n39.23\n44.45\n48.5\n59.6\n▃▇▇▆▁\n\n\nbill_depth_mm\n2\n0.99\n17.15\n1.97\n13.1\n15.60\n17.30\n18.7\n21.5\n▅▅▇▇▂\n\n\nflipper_length_mm\n2\n0.99\n200.92\n14.06\n172.0\n190.00\n197.00\n213.0\n231.0\n▂▇▃▅▂\n\n\nbody_mass_g\n2\n0.99\n4201.75\n801.95\n2700.0\n3550.00\n4050.00\n4750.0\n6300.0\n▃▇▆▃▂\n\n\nyear\n0\n1.00\n2008.03\n0.82\n2007.0\n2007.00\n2008.00\n2009.0\n2009.0\n▇▁▇▁▇",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "03_ggplot_basic.html#rule-1-always-plot-your-data",
    "href": "03_ggplot_basic.html#rule-1-always-plot-your-data",
    "title": "3  Grammar of Graphics",
    "section": "3.3 Rule #1: Always Plot Your Data",
    "text": "3.3 Rule #1: Always Plot Your Data",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "03_ggplot_basic.html#our-first-graphwith-ggplot2",
    "href": "03_ggplot_basic.html#our-first-graphwith-ggplot2",
    "title": "3  Grammar of Graphics",
    "section": "3.3 Our first graphwith ggplot2",
    "text": "3.3 Our first graphwith ggplot2\nThen we quickly visualize the data using the ggplot2 package. Suppose we want to see how the flipper length of penguins (encoded as flipper_length_mm in the dataset) is related to their body mass (encoded as body_mass_g).\n\n1library(ggplot2)\nggplot(\n2  data = penguins,\n3  aes(x = flipper_length_mm, y = body_mass_g)\n) + \n4  geom_point()\n\n\n1\n\nLoad the ggplot2 package.\n\n2\n\nSpecify the dataset used in the plot.\n\n3\n\nDefine the aesthetics of the plot. Here, we map the flipper length to the x-axis and body mass to the y-axis.\n\n4\n\nAdd a layer of points to the plot.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "03_ggplot_basic.html#why-always-plot-your-data",
    "href": "03_ggplot_basic.html#why-always-plot-your-data",
    "title": "3  Grammar of Graphics",
    "section": "3.4 Why Always Plot Your Data",
    "text": "3.4 Why Always Plot Your Data",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "04_ggplot_basic.html",
    "href": "04_ggplot_basic.html",
    "title": "4  Grammar of Graphics",
    "section": "",
    "text": "4.1 Why Graphs?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "04_ggplot_basic.html#our-first-graphwith-ggplot2",
    "href": "04_ggplot_basic.html#our-first-graphwith-ggplot2",
    "title": "4  Grammar of Graphics",
    "section": "4.2 Our first graphwith ggplot2",
    "text": "4.2 Our first graphwith ggplot2\nThen we quickly visualize the data using the ggplot2 package. Suppose we want to see how the flipper length of penguins (encoded as flipper_length_mm in the dataset) is related to their body mass (encoded as body_mass_g).\n\nlibrary(palmerpenguins) \ndata(package = \"palmerpenguins\") \n1library(ggplot2)\nggplot(\n2  data = penguins,\n3  aes(x = flipper_length_mm, y = body_mass_g)\n) + \n4  geom_point()\n\n\n1\n\nLoad the ggplot2 package.\n\n2\n\nSpecify the dataset used in the plot.\n\n3\n\nDefine the aesthetics of the plot. Here, we map the flipper length to the x-axis and body mass to the y-axis.\n\n4\n\nAdd a layer of points to the plot.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "04_ggplot_basic.html#why-always-plot-your-data",
    "href": "04_ggplot_basic.html#why-always-plot-your-data",
    "title": "4  Grammar of Graphics",
    "section": "4.3 Why Always Plot Your Data",
    "text": "4.3 Why Always Plot Your Data",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "01_intro.html#how-to-use-the-lecture-notes",
    "href": "01_intro.html#how-to-use-the-lecture-notes",
    "title": "1  Course goal",
    "section": "1.3 How to Use the Lecture Notes",
    "text": "1.3 How to Use the Lecture Notes\nThe left navigation shows the table of contents for this course. You can click on any lecture to jump to that section. The right side shows the content of the lecture.\nAll codes in this book will be wrapped in a code block like this:\n\n1x &lt;- 1+1\n2x^2\n\n\n1\n\nCalculate 1+1 and assign it to the variable x.\n\n2\n\nCalculate the square of x.\n\n\n\n\nwhere the right side has a circle, you can click on it to see the purpose of the code. and when you move your mouse over the code block, you will see a copy button, which you can click to copy the code so you can try it on your own.\nWe will have helpful tips or fun facts along the way. They are not esential, but can be useful to know. They will be in a green box like this: ::: {.callout-tip collapse=“true”} ## A Fun Fact ::: Some of them are collapsible (to avoid messing with the main content), so you can click on the title to expand it.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Course goal</span>"
    ]
  },
  {
    "objectID": "03_data_structure.html",
    "href": "03_data_structure.html",
    "title": "3  Data Structure",
    "section": "",
    "text": "3.1 Our dataset: penguins\nSurpring or not, data stycutrie is tuypicaly the first thing you need to know when you start working with data. What do we mean by data structure? Data structure is the way we organize our data. Humans are good at organizing things. We organize our clothes in a closet, our books on a shelf, and our data in a data structure.\nIn R, there are two main data structures: vector and tibble. Believe it or not, you can do almost everything with these two data structures.\nData structures are usually the most challenging part of any programming language. If you know how to manipulate data structures, you can easily translate the skill in one language to another.\nWe will use a dataset called penguins from the palmerpenguins package. We will use this dataset throughout our course. This dataset contains measurements of penguins collected from three species: Adelie, Chinstrap, and Gentoo.\nFirst things first, let us load the penguins dataset.\n1# install.packages(\"palmerpenguins\")\n2library(palmerpenguins)\n3data(package = \"palmerpenguins\")\n\n\n1\n\nIf you have not installed the palmerpenguins package, you can install it by uncommenting this line.\n\n2\n\nLoad the palmerpenguins package.\n\n3\n\nLoad the penguins dataset.\nAs a first rule, always, always take a look at your data. One way is just to display the data.\n1penguins\n\n\n1\n\nDisplay the penguins dataset.\nThe data format we are using is called tibble. It is a modern version of the data.frame in R. It is part of the tidyverse package. For most of your daily works, tibble is the only two formats (the other is vector) you need to know.\nHowever, if you want to see the data in a more structured way, you can use the skim() function in the package skimr.\n1pacman::p_load(skimr)\n2skim(penguins)\n\n\n1\n\nLoad the skimr package.\n\n2\n\nDisplay the summary of the penguins dataset.\n\n\n\n\n\nData summary\n\n\nName\npenguins\n\n\nNumber of rows\n344\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n3\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nspecies\n0\n1.00\nFALSE\n3\nAde: 152, Gen: 124, Chi: 68\n\n\nisland\n0\n1.00\nFALSE\n3\nBis: 168, Dre: 124, Tor: 52\n\n\nsex\n11\n0.97\nFALSE\n2\nmal: 168, fem: 165\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nbill_length_mm\n2\n0.99\n43.92\n5.46\n32.1\n39.23\n44.45\n48.5\n59.6\n▃▇▇▆▁\n\n\nbill_depth_mm\n2\n0.99\n17.15\n1.97\n13.1\n15.60\n17.30\n18.7\n21.5\n▅▅▇▇▂\n\n\nflipper_length_mm\n2\n0.99\n200.92\n14.06\n172.0\n190.00\n197.00\n213.0\n231.0\n▂▇▃▅▂\n\n\nbody_mass_g\n2\n0.99\n4201.75\n801.95\n2700.0\n3550.00\n4050.00\n4750.0\n6300.0\n▃▇▆▃▂\n\n\nyear\n0\n1.00\n2008.03\n0.82\n2007.0\n2007.00\n2008.00\n2009.0\n2009.0\n▇▁▇▁▇",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Structure</span>"
    ]
  },
  {
    "objectID": "03_data_structure.html#our-dataset-penguins",
    "href": "03_data_structure.html#our-dataset-penguins",
    "title": "3  Data Structure",
    "section": "",
    "text": "Artwork by allison_horst",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Structure</span>"
    ]
  },
  {
    "objectID": "01_intro.html#how-to-read-the-lecture-notes",
    "href": "01_intro.html#how-to-read-the-lecture-notes",
    "title": "1  Course goal",
    "section": "1.3 How to Read the Lecture Notes",
    "text": "1.3 How to Read the Lecture Notes\nThe left navigation shows the table of contents for this course. You can click on any lecture to jump to that section. The right side shows the content of the lecture.\nAll codes in this book will be wrapped in a code block like this:\n\n1x &lt;- 1+1\n2x^2\n\n\n1\n\nCalculate 1+1 and assign it to the variable x.\n\n2\n\nCalculate the square of x.\n\n\n\n\nwhere the right side has a circle, you can click on it to see the purpose of the code. and when you move your mouse over the code block, you will see a copy button, which you can click to copy the code so you can try it on your own.\nWe will have helpful tips or fun facts along the way. They are not esential, but can be useful to know. They will be in a green box like this:\n\n\n\n\n\n\nTip\n\n\n\n\n\nSuprise! This is a tip box.\n\n\n\nSome of them are collapsible (to avoid messing with the main content), so you can click on the title to expand it.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Course goal</span>"
    ]
  },
  {
    "objectID": "index.html#course-info",
    "href": "index.html#course-info",
    "title": "EE BIOL C234",
    "section": "Course Info",
    "text": "Course Info\n\nWhere and When: We’ll be meeting Mondays and Wednesdays, 11:00 AM to 11:50 AM, in Botany 108.\nThe Grind: Yes, there will be weekly assignments. If you want to build computational muscle, you’re going to have to sweat a bit. But rest easy, no terrifying final exam to ruin your holidays!\nWhat to Bring: Just your laptop and a healthy dose of intellectual curiosity. If you have played with R before, great; if not, don’t worry—you’ll pick it up.\nCourse Material: This lecture note will be updated as the course progresses. \n\nThis is the inaugural run of this course for me. So if I’m losing you, boring you, talking too fast, too slow, whatever – speak up! Your feedback is my compass.",
    "crumbs": [
      "Weclome"
    ]
  },
  {
    "objectID": "index.html#plan-tentative",
    "href": "index.html#plan-tentative",
    "title": "EE BIOL C234",
    "section": "Plan (Tentative)",
    "text": "Plan (Tentative)\n\nIntroduction to R and RStudio\nBasic data types: tibble and vector\nData wrangling with dplyr and tidyr",
    "crumbs": [
      "Logistics"
    ]
  },
  {
    "objectID": "index.html#how-to-read-the-lecture-notes",
    "href": "index.html#how-to-read-the-lecture-notes",
    "title": "EE BIOL C234",
    "section": "How to Read the Lecture Notes",
    "text": "How to Read the Lecture Notes\nThe left navigation shows the table of contents for this course. You can click on any lecture to jump to that section. The right side shows the content of the lecture.\nAll codes in this book will be wrapped in a code block like this:\n\n1x &lt;- 1+1\n2x^2\n\n\n1\n\nCalculate 1+1 and assign it to the variable x.\n\n2\n\nCalculate the square of x.\n\n\n\n\nwhere the right side has a circle, you can click on it to see the purpose of the code. and when you move your mouse over the code block, you will see a copy button, which you can click to copy the code so you can try it on your own.\nWe will have helpful tips or fun facts along the way. They are not esential, but can be useful to know. Some of them are collapsible (to avoid messing with the main content), so you can click on the title to expand it. They will be in a green box like this:\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\nAs promised, this is a tips box.",
    "crumbs": [
      "Logistics"
    ]
  },
  {
    "objectID": "index.html#how-to-readuse-the-lecture-notes",
    "href": "index.html#how-to-readuse-the-lecture-notes",
    "title": "EE BIOL C234",
    "section": "How to Read/Use the Lecture Notes",
    "text": "How to Read/Use the Lecture Notes\nThe left navigation shows the table of contents for this course. You can click on any lecture to jump to that section. The right side shows the content of the lecture.\nAll codes in this book will be wrapped in a code block like this:\n\n1x &lt;- 1+1\n2x^2\n\n\n1\n\nCalculate 1+1 and assign it to the variable x.\n\n2\n\nCalculate the square of x.\n\n\n\n\nwhere the right side has a circle, you can click on it to see the purpose of the code. and when you move your mouse over the code block, you will see a copy button, which you can click to copy the code so you can try it on your own.\nWe will have helpful tips or fun facts along the way. They are not esential, but can be useful to know. Some of them are collapsible (to avoid messing with the main content), so you can click on the title to expand it. They will be in a green box like this:\n\n\n\n\n\n\nTip\n\n\n\n\n\n\n\n\nAs promised, this is a tips box.",
    "crumbs": [
      "Weclome"
    ]
  },
  {
    "objectID": "01_intro.html#plan-tentative",
    "href": "01_intro.html#plan-tentative",
    "title": "\n1  Course goal\n",
    "section": "\n1.3 Plan (Tentative)",
    "text": "1.3 Plan (Tentative)\n\nIntroduction to R and RStudio\nBasic data types: tibble and vector\n\nIntroduction to ggplot2\n\nData wrangling with dplyr\n\ndplyr::filter()\ndplyr::select()\ndplyr::mutate()\ndplyr::arrange()\ndplyr::group_by()\ndplyr::summarize()\n\n\nPrinciples of data visualization\n\nColor theory\nEffective caption\n\n\nPracticle tools in ggplot ecosystem\n\nAnnotation with ggrepel and gghighlight\n\nLabeling with ggtext\n\nMulti-panel plots with patchwork\n\nInteractive plots with ggiraph\n\nAnimated plots with gganimate\n\nToo many points in scatter plot with ggpointdensity and ggdensity\n\nHanding overlapping points with\n\n\nIntroduction to Functional Programming with purrr\n\nParallel processing with furrr\n\n\n\nIntroduction to Quarto\n\nBlocks and chunk options\nReference management with bibtex\n\n\n\nIntroduction to Typst",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Course goal</span>"
    ]
  },
  {
    "objectID": "01_intro.html#what-we-wont-cover",
    "href": "01_intro.html#what-we-wont-cover",
    "title": "\n1  Course goal\n",
    "section": "\n1.4 What We Won’t Cover",
    "text": "1.4 What We Won’t Cover\nThere is so much to learn with computing. There is a reason why programmers are paid so well.\n\n\nMachine Learning: This is a vast field that deserves its own course. We’ll touch on the basics, but we won’t dive deep.\n\nWeb Development: This is a whole different beast. We won’t cover it.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Course goal</span>"
    ]
  },
  {
    "objectID": "index.html#navigating-the-lecture-notes",
    "href": "index.html#navigating-the-lecture-notes",
    "title": "EE BIOL C234",
    "section": "Navigating the Lecture Notes",
    "text": "Navigating the Lecture Notes\nYour left sidebar is your map to the course, showing all lectures—just a click away. On the right, you’ll see a table of contents specific to each lecture.\nIn this course, code examples will appear in blocks like this:\n\n1x &lt;- 1+1\n2x^2\n\n\n1\n\nCalculate 1+1 and assign it to the variable x.\n\n2\n\nCalculate the square of x.\n\n\n\n\nSee the little circle on the right? Hover over it for a quick explanation of the code. When you hover over the code block itself, you’ll also spot a “copy” button—perfect for copying and pasting it into your R console to try it out yourself (fun fact: that’s how a large portion of coding is done in real life).\nThroughout the course, expect tips, tricks, and even a few fun facts sprinkled in. While not essential, these extras might give you an edge or deeper insight. Some of them are collapsible, so you can click to expand and explore them at your own pace. Look out for these in green boxes, like this:\n\n\n\n\n\n\nA Tip Box\n\n\n\n\n\n\n\n\nAs promised, this is a tips box.",
    "crumbs": [
      "Weclome"
    ]
  }
]