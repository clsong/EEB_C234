[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EE BIOL C234",
    "section": "",
    "text": "Logistics\nWelcome to EE BIOL C234: Practical Computing for Evolutionary Biologists and Ecologists—or as I like to call it, “21st century Kung-Fu!”\n\nWhere and When: We’ll be meeting Mondays and Wednesdays, 11:00 AM to 11:50 AM, in Botany 108.\nThe Grind: Yes, there will be weekly assignments. If you want to build computational muscle, you’re going to have to sweat a bit. But rest easy, no terrifying final exam to ruin your holidays!\nWhat to Bring: Your laptop and, more importantly, your intellectual curiosity. A basic understanding of R will be helpful, but not required.\nCourse Material: This lecture note will be updated as the course progresses. \n\nThis is the inaugural run of this course for me. So if I’m losing you, boring you, talking too fast, too slow, whatever – speak up! Your feedback is my compass.",
    "crumbs": [
      "Logistics"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "References"
  },
  {
    "objectID": "dplyr.html",
    "href": "dplyr.html",
    "title": "Title",
    "section": "",
    "text": "There are difficult things in programming: naming and cache."
  },
  {
    "objectID": "dplyr.html#pipe",
    "href": "dplyr.html#pipe",
    "title": "Title",
    "section": "",
    "text": "There are difficult things in programming: naming and cache."
  },
  {
    "objectID": "01_intro.html",
    "href": "01_intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Okay, let’s be honest. You signed up to study Ecology and Evolutionary Biology, not Computer Science. You probably envision yourself out in the field, knee-deep in mud, observing the subtle interactions of ecosystems—not stuck behind a screen, wrestling with semicolons and syntax errors. And now, with these fancy new AI tools that seem to do everything but your taxes, you might be wondering: why bother learning this stuff at all? Can’t a chatbot handle it all—generate analyses, whip up some plots, and call it a day?\nWell, you’re not wrong to wonder. Technology is reshaping everything, and science is no exception. But here’s the thing: just as biologists in the past had to master the microscope, today’s biologists need a strong foundation in computing. This course isn’t about turning you into a programmer; it’s about equipping you with the skills to make technology work for you—so you’re the one in control.\nAnd don’t worry, this class won’t throw you into the deep end. We’re going step by step, almost like learning a new language. (Good news: coding languages are much easier than human languages!) Examples, exercises, and patience will be our path.\nNow, back to those AI tools. Yes, they’re handy, but relying on it without understanding the basics is like cooking from a recipe in a language you barely know. Sure, you might finish the dish, but there’s a good chance you’ll miss something critical—maybe misinterpret a step, add the wrong ingredient, or end up with a surprise result. Becoming computationally literate helps you recognize when AI has gone off track, saving you from mess you’d rather avoid.\nI get the allure of the “easy button.” But investing in these skills now will pay off many times over. You’ll be a more efficient, happier researcher—and, franky, it will increase your chances of publishing in high-profile journals."
  },
  {
    "objectID": "01_intro.html#why-take-this-course-in-the-age-of-ai",
    "href": "01_intro.html#why-take-this-course-in-the-age-of-ai",
    "title": "Introduction",
    "section": "",
    "text": "Okay, let’s be honest. You signed up to study Ecology and Evolutionary Biology, not Computer Science. You probably envision yourself out in the field, knee-deep in mud, observing the subtle interactions of ecosystems—not stuck behind a screen, wrestling with semicolons and syntax errors. And now, with these fancy new AI tools that seem to do everything but your taxes, you might be wondering: why bother learning this stuff at all? Can’t a chatbot handle it all—generate analyses, whip up some plots, and call it a day?\nWell, you’re not wrong to wonder. Technology is reshaping everything, and science is no exception. But here’s the thing: just as biologists in the past had to master the microscope, today’s biologists need a strong foundation in computing. This course isn’t about turning you into a programmer; it’s about equipping you with the skills to make technology work for you—so you’re the one in control.\nAnd don’t worry, this class won’t throw you into the deep end. We’re going step by step, almost like learning a new language. (Good news: coding languages are much easier than human languages!) Examples, exercises, and patience will be our path.\nNow, back to those AI tools. Yes, they’re handy, but relying on it without understanding the basics is like cooking from a recipe in a language you barely know. Sure, you might finish the dish, but there’s a good chance you’ll miss something critical—maybe misinterpret a step, add the wrong ingredient, or end up with a surprise result. Becoming computationally literate helps you recognize when AI has gone off track, saving you from mess you’d rather avoid.\nI get the allure of the “easy button.” But investing in these skills now will pay off many times over. You’ll be a more efficient, happier researcher—and, franky, it will increase your chances of publishing in high-profile journals."
  },
  {
    "objectID": "01_intro.html#what-youll-learn",
    "href": "01_intro.html#what-youll-learn",
    "title": "1  Introduction",
    "section": "1.2 What You’ll Learn",
    "text": "1.2 What You’ll Learn\nWe will cover the following topics in this course, which I believe are the most essential computing skills.\n\n1.2.1 Fluency with R\nWhat is our weapon of choice in this course? The R programming language. It is not the most well-polished language. It is not the fastest language. It is not the most user-friendly language. So, why R? Well, it is the lingua franca in our community. The computational tools in ecology are largely R-based. So, if you want to tap into this wealth, you’ll need a working knowledge of R.\n\n\n\n\n\n\nAlternatives\n\n\n\nNot sold on R? You could try Julia, a newer language that’s faster, more elegant, and gaining popularity. The syntax is similar enough to R to make it a relatively easy transition, and it can even load R packages, so you can have the best of both worlds.\n\n\nR has also evolved dramatically in the past decade with the rise of the tidyverse. When I started grad school, I absolutely hated using R. has completely changed how I felt about this language. It introduced a whole new way of handling and visualizing data — a way that feels logical and intuitive — and I stringly believe that it is the right approach of thinking about data manipulation and plotting (yes I meant the).\n\n\n\n\n\n\nWho’s Behind the Tidyverse?\n\n\n\n\n\nThe tidyverse revolution is largely thanks to Hadley Wickham, whose contributions earned him the COPSS Presidents’ Award, the top honor in statistics.\nBut it’s not just him—the tidyverse is a community effort, a group of people with a shared vision (link).\n\n\n\n\n\n1.2.2 Making Publication-Ready Figures\nWith ggplot2, you’ll learn the Grammar of Graphics, one of the most powerful plotting systems out there. Beyond just producing high-quality figures, it will teach you a structured approach to data visualization.\nWhile ggplot2 is powerful, its defaults aren’t always perfect. We’ll cover design principles that enhance both the appeal and informativeness of your figures—a skill that’s invaluable since figures often make the first impression on readers. By the end of the class, you will be able to make figures like this:\n\n\n\nby Cédric Scherer\n\n\n\n\n1.2.3 The Art of Data Wrangling\nIn real-world research, data is rarely neat. Before you can start analyzing, you’ll likely spend hours organizing it into a usable format. Fortunately, dplyr and tidyr make this much easier, turning data wrangling into a clear, logical workflow.\nImagine describing your morning routine. In base R, it might look like a jumbled nest of functions: ::: {.cell}\neat(dressed(shower(brush(wakeup(you)))))\n::: Or, a series of confusing, intermediate variables: ::: {.cell}\nyou_w <- wakeup(you)\nyou_bw <- brush(you_w)\nyou_sbw <- shower(you_bw)\n...\n::: With dplyr, however, it transforms into a straightforward, logical flow: ::: {.cell}\nyou |> \n  wakeup() |> \n  brush() |> \n  shower() |> \n  get_dressed() |> \n  eat() \n:::\nIn the tidyverse ecosystem, each step of data wrangling becomes clear, easy to follow, and—importantly—easy to debug. You’ll be introduced to a handful of core verbs, fewer than ten in total, which handle around 90% of the everyday tasks you’ll encounter. And just as promised, coding languages are easier than human languages :)\n\n\n1.2.4 Scientific typsetting\nYes, Microsoft Word is great. But updating figures, managing references, or keeping layouts consistent can quickly turn into a headache. The key issue is that Word is what we call a WYSIWYG editor—What You See Is What You Get. This means you’re constantly tweaking the layout to get it just right, which is time-consuming and error-prone.\nIn general, it is a good idea to separate the content from the layout. There are a couple of tools to do that (including the notarious Latex). But we will focus on Quarto, a document preparation system crafted for researchers. It lets you seamlessly integrate code, references, and figures, generating polished outputs in formats like Word or LaTeX. In the end of the class, you will be able to produce documents like this with one click in R:\n\n\n\nby LaPreprint\n\n\n\n\n\n\n\n\nModern Alternative to LaTeX\n\n\n\n\n\nWhile Quarto is powerful, sometimes for the best layout, we need more special tools. Latex is one, but it is outdated (you need to install ). We will briefly touch Typst, a modern alternative to LaTeX that’s powerful yet more intuitive. It offers a user-friendly way to create beautiful, publication-ready documents without the steep learning curve of LaTeX, giving you a smooth and efficient experience in scientific typesetting.\n\n\n\n\n\n1.2.5 Reproducible Research\nAs a data editor in a journal, I’m often surprised by how many papers are difficult to reproduce. This is a big problem in science. In this course, you’ll learn to make your research fully reproducible, which benefits not only the scientific community but also you—it makes it easier to revisit and build upon your work.\nWe’ll cover version control with Git and GitHub to help you track changes, back up your work, and collaborate with others. Additionally, we’ll dive into specific techniques in R that support reproducible workflows."
  },
  {
    "objectID": "ggplot_basic.html",
    "href": "ggplot_basic.html",
    "title": "2  Grammar of Graphics",
    "section": "",
    "text": "We will use a dataset called penguins from the palmerpenguins package. We will use this dataset throughout our course. This dataset contains measurements of penguins collected from three species: Adelie, Chinstrap, and Gentoo.\n\n\n\nArtwork by allison_horst\n\n\nFirst things first, let us load the penguins dataset.\n\n1# install.packages(\"palmerpenguins\")\n2library(palmerpenguins)\n3data(package = \"palmerpenguins\")\n\n\n1\n\nIf you have not installed the palmerpenguins package, you can install it by uncommenting this line.\n\n2\n\nLoad the palmerpenguins package.\n\n3\n\nLoad the penguins dataset.\n\n\n\n\nAs a first rule, always, always take a look at your data.\n\n1penguins\n\n\n1\n\nDisplay the penguins dataset.\n\n\n\n\n\n  \n\n\n\nThe data format we are using is called tibble. It is a modern version of the data.frame in R. It is part of the tidyverse package. For most of your daily works, tibble is the only two formats (the other is vector) you need to know.\nThen we quickly visualize the data using the ggplot2 package. Suppose we want to see how the flipper length of penguins (encoded as flipper_length_mm in the dataset) is related to their body mass (encoded as body_mass_g).\n\n1library(ggplot2)\nggplot(\n2  data = penguins,\n3  aes(x = flipper_length_mm, y = body_mass_g)\n) + \n4  geom_point()\n\n\n1\n\nLoad the ggplot2 package.\n\n2\n\nSpecify the dataset used in the plot.\n\n3\n\nDefine the aesthetics of the plot. Here, we map the flipper length to the x-axis and body mass to the y-axis.\n\n4\n\nAdd a layer of points to the plot.\n\n\n\n\n\n\n\n\n\n\n\nOf course, this is just the beginning. To give you a sense of how to visualize it better, this would be the goal:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Grammar of Graphics</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "Summary",
    "section": "",
    "text": "Summary\nIn summary, this book has no content whatsoever."
  },
  {
    "objectID": "R_basics.html",
    "href": "R_basics.html",
    "title": "R and RStudio",
    "section": "",
    "text": "Class Objective\n\n\n\n\nTo install R and RStudio\nGet R to do basic math\n\n\n\nWhat is our weapon of choice in this endeavor? The R programming language.\nR is undoubtably the most used language among ecologists. It is not the most well-defined language. It is not the most efficient language. It is not the most user-friendly language. But it is the most used language in our community. Most packages in ecology are written in R, and most ecologists use R. So, if you want to be able to use the tools that are available, you need to learn R, at least how R is.And that is a good reason to learn it.\n\n\n\n\n\n\nTip\n\n\n\nIf you are serious about computing, then learn Julia, which is much better designed and fast.\n\n\nMost imortantly, in the last decade, R has undergone a revolution with the advent of the tidyverse. When I started grad school, I had almost no experience with programming, and I absolutely hated using R. However, learning tiduyverse has completely changed how I felt about this language. It is the right way of thinking about data manipulation and plot, and yes, I meant the.\nThis revolution largely thanks to Hadley Wickham. Because of his revoluntionary contribution, he has been awarded COPSS Presidents’ Award-the most imoportant award given to a statistican.\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nTo make RStuido look better, you may want to install the fira font. Instruction can be found here and here."
  },
  {
    "objectID": "R_basics.html#installing-rstudio",
    "href": "R_basics.html#installing-rstudio",
    "title": "R and RStudio",
    "section": "",
    "text": "Tip\n\n\n\nTo make RStuido look better, you may want to install the fira font. Instruction can be found here and here."
  },
  {
    "objectID": "02_R_basics.html",
    "href": "02_R_basics.html",
    "title": "2  Basics of R and RStudio",
    "section": "",
    "text": "2.1 Installing R and RStudio",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#installing-rstudio",
    "href": "02_R_basics.html#installing-rstudio",
    "title": "2  R and RStudio",
    "section": "2.2 Installing RStudio",
    "text": "2.2 Installing RStudio\n\n\n\n\n\n\nTip\n\n\n\nTo make RStuido look better, you may want to install the fira font. Instruction can be found here and here.\nWithout Fira, you code could look like this:\n\nx",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#a-simple-calculation",
    "href": "02_R_basics.html#a-simple-calculation",
    "title": "2  Basics of R and RStudio",
    "section": "2.2 A simple calculation",
    "text": "2.2 A simple calculation",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#install-r-packages",
    "href": "02_R_basics.html#install-r-packages",
    "title": "2  Basics of R and RStudio",
    "section": "2.3 Install R packages",
    "text": "2.3 Install R packages",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  },
  {
    "objectID": "02_R_basics.html#installing-r-and-rstudio",
    "href": "02_R_basics.html#installing-r-and-rstudio",
    "title": "2  Basics of R and RStudio",
    "section": "",
    "text": "Tip\n\n\n\nTo make RStuido look better, you may want to install the fira font. Instruction can be found here and here.\nWithout Fira, you code could look like this: x &lt;- 5 |&gt; sqrt() |&gt; round(2)\nBut with Firacode, it will look much better\n\nx &lt;- 5  |&gt; \n    sqrt() |&gt; \n    round(2)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics of R and RStudio</span>"
    ]
  }
]